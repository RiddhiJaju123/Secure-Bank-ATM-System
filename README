Name- Riddhi Ashish Jaju

Email- rjaju1@binghamton.edu

The programming language used- Java

Code for performing encryption/decryption-
    public key encryption- RSA 
    symmetric encryption- AES
    Encryption(atm.java)-
        try {
                //Load public_key of Bank
                BufferedReader publicKeyReader = new BufferedReader(new FileReader("public_key.pem"));
                StringBuilder publicKeyPEM = new StringBuilder();
                String line;
                while ((line = publicKeyReader.readLine()) != null) {
                    if (!line.contains("-----BEGIN PUBLIC KEY-----") && !line.contains("-----END PUBLIC KEY-----")) {
                        publicKeyPEM.append(line);
                    }
                }
                publicKeyReader.close();

                byte[] publicKeyBytes = Base64.getDecoder().decode(publicKeyPEM.toString());
                X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
                KeyFactory keyFactory = KeyFactory.getInstance("RSA");
                PublicKey bankPublicKey = keyFactory.generatePublic(publicKeySpec);

                //Symmetric key is generated by ATM.
                KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
                keyGenerator.init(256);
                symmetricKey = keyGenerator.generateKey();

                //Symmetric key is encrypted using Bank's public key
                Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                cipher.init(Cipher.ENCRYPT_MODE, bankPublicKey);
                String encryptedString = Base64.getEncoder().encodeToString(cipher.doFinal(symmetricKey.getEncoded()));
                out.writeUTF(encryptedString);

                while (true) {
                    //ID is encrypted using symmetric key.
                    Cipher symmetricCipher = Cipher.getInstance("AES");
                    symmetricCipher.init(Cipher.ENCRYPT_MODE, symmetricKey);
                    System.out.print("Enter Your Id : ");
                    String userId = input.readLine();
                    byte[] encryptedUserData = symmetricCipher.doFinal((userId).getBytes());

                    String cipherTextStrId = Base64.getEncoder().encodeToString(encryptedUserData);
                    out.writeUTF(cipherTextStrId);

                    //password is encrypted using symmetric key.
                    symmetricCipher.init(Cipher.ENCRYPT_MODE, symmetricKey);
                    System.out.print("Enter Your password : ");
                    String password = input.readLine();
                    byte[] encryptedUserData1 = symmetricCipher.doFinal((password).getBytes());

                    String cipherTextStrPasswd = Base64.getEncoder().encodeToString(encryptedUserData1);
                    out.writeUTF(cipherTextStrPasswd);
                    if (in.readUTF().equals("ID and password are correct")) {
                        System.out.println("ID and password are correct");
                        break;
                    } else {
                        System.out.println("ID or password is incorrect");
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

    
    Decryption(atm.java)-
        //Load private_key of Bank
        BufferedReader privateKeyReader = new BufferedReader(new FileReader("private_key.pem"));
                    privateKeyPEM = new StringBuilder();
                    String line1;
                    while ((line1 = privateKeyReader.readLine()) != null) {
                        if (!line1.contains("-----BEGIN PRIVATE KEY-----")
                                && !line1.contains("-----END PRIVATE KEY-----")) {
                            privateKeyPEM.append(line1);
                        }
                    }
                    privateKeyReader.close();

                    byte[] privateKeyBytes = Base64.getDecoder().decode(privateKeyPEM.toString());
                    PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
                    KeyFactory keyFactory = KeyFactory.getInstance("RSA");
                    PrivateKey bankPrivateKey = keyFactory.generatePrivate(privateKeySpec);

                    //The encypted symmetric key is decrypted using Bank's private key.
                    String encryptedString = (String) in.readUTF();
                    byte[] encryptedStringbyte = Base64.getDecoder().decode(encryptedString);
                    Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
                    cipher.init(Cipher.DECRYPT_MODE, bankPrivateKey);
                    byte[] receivedEncryptedSymmetricKey = encryptedStringbyte;
                    byte[] symmetricKeyBytes = cipher.doFinal(receivedEncryptedSymmetricKey);
                    SecretKey symmetricKey = new SecretKeySpec(symmetricKeyBytes, "AES");

                    while (true) {

                        try {

                            String cipherTextStrUserId = in.readUTF();
                            
                            //encrypted ID is decrypted using symmetric key.
                            byte[] cipherTextId = Base64.getDecoder().decode(cipherTextStrUserId);
                            Cipher symmetricCipher = Cipher.getInstance("AES");
                            symmetricCipher.init(Cipher.DECRYPT_MODE, symmetricKey);
                            byte[] receivedEncryptedUserData = cipherTextId;
                            byte[] userDataBytes = symmetricCipher.doFinal(receivedEncryptedUserData);
                            userId = new String(userDataBytes);

                            String cipherTextStrPasswd = (String) in.readUTF();

                            //encrypted ID is decrypted using symmetric key.
                            byte[] cipherTextPasswd = Base64.getDecoder().decode(cipherTextStrPasswd);
                            Cipher symmetricCipher1 = Cipher.getInstance("AES");
                            symmetricCipher1.init(Cipher.DECRYPT_MODE, symmetricKey);
                            byte[] receivedEncryptedUserData1 = cipherTextPasswd;
                            byte[] userDataBytes1 = symmetricCipher.doFinal(receivedEncryptedUserData1);
                            String password = new String(userDataBytes1);

Whether your code was tested on remote.cs.binghamton.edu- Yes

How to execute your program-
    Compile- make
    Execute- The client is invoked as:
                java atm <Bank server’s domain name> <Bank server’s port number>
             The bank server is invoked as:
                java bank <Bank server’s port number>